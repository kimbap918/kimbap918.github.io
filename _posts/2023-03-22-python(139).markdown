---
layout: post
title: 파이썬 최소공배수(백준 BOJ 13241)
date: 2023-03-22 20:10:00 +0900
image: 백준.png
tags: 알고리즘 유클리드호제법
categories: 문제풀이

---

<br>

유클리드 호제법 리마인드

## 문제

정수 B에 0보다 큰 정수인 N을 곱해 정수 A를 만들 수 있다면, A는 B의 배수이다.

예:

- 10은 5의 배수이다 (5*2 = 10)
- 10은 10의 배수이다(10*1 = 10)
- 6은 1의 배수이다(1*6 = 6)
- 20은 1, 2, 4,5,10,20의 배수이다.

다른 예:

- 2와 5의 최소공배수는 10이고, 그 이유는 2와 5보다 작은 공배수가 없기 때문이다.
- 10과 20의 최소공배수는 20이다.
- 5와 3의 최소공배수는 15이다.

당신은 두 수에 대하여 최소공배수를 구하는 프로그램을 작성 하는 것이 목표이다.

<br>

## 입력

한 줄에 두 정수 A와 B가 공백으로 분리되어 주어진다.

50%의 입력 중 A와 B는 1000(103)보다 작다. 다른 50%의 입력은 1000보다 크고 100000000(108)보다 작다.

추가: 큰 수 입력에 대하여 변수를 64비트 정수로 선언하시오. C/C++에서는 long long int를 사용하고, Java에서는 long을 사용하시오.

<br>

## 출력

A와 B의 최소공배수를 한 줄에 출력한다.

<br>

## 예제 입력 1

```
1 1
```

## 예제 출력 1 

```
1
```

## 예제 입력 2

```
3 5
```

## 예제 출력 2 

```
15
```

## 예제 입력 3 

```
1 123
```

## 예제 출력 3 

```
123
```

## 예제 입력 4 

```
121 199
```

## 예제 출력 4 

```
24079
```

<br>

## 📝풀어보기

📌 유클리드 호제법 리마인드

유클리드 호제법은 두 수가 주어지면 나눗셈만 반복해서 최대공약수를 구할 수 있는 방법이다.

두 수 A, B 가 주어질 때, B가 0이 될때까지 A % B를 반복하면 최대공약수를 구할수 있다.

<br>

여기서 문제는 최소공배수를 구하는건데, 최소공배수는 최대공약수를 구한다면 아주 간단하다.

최소공배수는 A와 B가 주어졌을 때, A에 B를 곱한 값에 A, B의 최대공약수를 나누는것이다.

즉 A*B / GCD(A, B)이다. 

``` python
# 유클리드 호제법은 나눗셈만 반복해서 최대공약수(GCD)를 구할 수 있다.
A, B = map(int, input().split())
tmp = 0

# 최대공약수 구하기(유클리드 호제법)
# 유클리드 호제법은 두 수를 0이 될때까지 나누는 방법
def GCD(A, B):
    while B != 0:
        tmp = A % B
        A = B
        B = tmp
    return A

# 두 수 A와 B의 최소공배수는 A와 B의 곱을 A와 B의 최대공약수를 나눈 것과 같다.
def LCM(A, B):
    return (A * B) / GCD(A, B)

print(int(LCM(A, B)))
```
