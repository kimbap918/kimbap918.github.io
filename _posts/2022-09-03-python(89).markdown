---
layout: post
title: 파이썬 어린 왕자(BOJ 1004)
date: 2022-09-03 13:00:00 +0900
image: 백준.png
tags: 알고리즘
categories: 문제풀이
---

<br>

## 문제

어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다. 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다. 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.

![img](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/201003/dfcmhrjj_113gw6bcng2_b.gif)

빨간 실선은 어린 왕자가 출발점에서 도착점까지 도달하는데 있어서 필요한 행성계 진입/이탈 횟수를 최소화하는 경로이며, 원은 행성계의 경계를 의미한다. 이러한 경로는 여러 개 존재할 수 있지만 적어도 3번의 행성계 진입/이탈이 필요하다는 것을 알 수 있다.

위와 같은 은하수 지도, 출발점, 도착점이 주어졌을 때 어린 왕자에게 필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램을 작성해 보자. 행성계의 경계가 맞닿거나 서로 교차하는 경우는 없다. 또한, 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다.

<br>

## 입력

입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트케이스에 대해 첫째 줄에 출발점 (x1, y1)과 도착점 (x2, y2)이 주어진다. 두 번째 줄에는 행성계의 개수 n이 주어지며, 세 번째 줄부터 n줄에 걸쳐 행성계의 중점과 반지름 (cx, cy, r)이 주어진다.

<br>

## 출력

각 테스트 케이스에 대해 어린 왕자가 거쳐야 할 최소의 행성계 진입/이탈 횟수를 출력한다.

<br>

## 제한

- -1000 ≤ x1, y1, x2, y2, cx, cy ≤ 1000
- 1 ≤ r ≤ 1000
- 1 ≤ n ≤ 50
- 좌표와 반지름은 모두 정수

<br>

## 예제 입력 1

```
2
-5 1 12 1
7
1 1 8
-3 -1 1
2 2 2
5 5 1
-4 5 1
12 1 1
12 1 2
-5 1 5 1
1
0 0 2
```

## 예제 출력 1

```
3
0
```

## 예제 입력 2

```
3
-5 1 5 1
3
0 0 2
-6 1 2
6 2 2
2 3 13 2
8
-3 -1 1
2 2 3
2 3 1
0 1 7
-4 5 1
12 1 1
12 1 2
12 1 3
102 16 19 -108
12
-107 175 135
-38 -115 42
140 23 70
148 -2 39
-198 -49 89
172 -151 39
-179 -52 43
148 42 150
176 0 10
153 68 120
-56 109 16
-187 -174 8
```

## 예제 출력 2

```
2
5
3
```

<br>

## 📝 풀어보기

📌 이 문제 역시 두 점 사이의 거리 공식을 활용해서 구한다.

출발점 (x1, y1)과 도착점 (x2, y2)의 좌표를 입력받고 행성계의 개수n 만큼 반복하면서 행성계의 중점과 반지름(x, y, r)을 입력받는다.

그리고 출발점과 도착점이 주어지는 원 안에 속하는지 확인을 한다.

출발점과 도착점이 둘 다 속하거나 둘 다 속하지 않으면 진입이나 이탈을 할 필요가 없으므로 하나는 속하고, 하나는 속하지 않을때 cnt를 1씩 증가시켜주고 출력한다.

``` python
import math
T = int(input())
# 출발점과 도착점이 주어지는 원 안에 속하는지 속하지 않는지 확인한다.
# 둘 다 속하거나, 둘 다 속하지 않으면 진입이나 이탈을 할 필요가 없다.
# 하나는 속하고, 하나는 속하지 않을때 cnt를 1 증가시켜 준다.
for _ in range(T):
    cnt = 0
    x1, y1, x2, y2 = map(int, input().split())
    n = int(input())
    for _ in range(n):
        x, y, r = map(int, input().split())
        d1 = math.sqrt(((x1-x)**2) + ((y1+y)**2))
        d2 = math.sqrt(((x2-x)**2) + ((y2-y)**2))
        if (d1 < r and d2 > r) or (d1 > r and d2 < r):
            cnt += 1
    print(cnt)
```

