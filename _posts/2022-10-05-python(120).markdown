---
layout: post
title: 파이썬 연산자 끼워넣기(백준 BOJ 14888)
date: 2022-10-05 11:39:00 +0900
image: 백준.png
tags: 알고리즘
categories: 문제풀이
---

<br>

## 문제

N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.

우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.

예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.

- 1+2+3-4×5÷6
- 1÷2+3+4-5×6
- 1+2÷3×4-5+6
- 1÷2×3-4+5+6

식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.

- 1+2+3-4×5÷6 = 1
- 1÷2+3+4-5×6 = 12
- 1+2÷3×4-5+6 = 5
- 1÷2×3-4+5+6 = 7

N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

<br>

## 입력

첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

<br>

## 출력

첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.

<br>

## 예제 입력 1

```
2
5 6
0 0 1 0
```

## 예제 출력 1

```
30
30
```

## 예제 입력 2

```
3
3 4 5
1 0 1 0
```

## 예제 출력 2

```
35
17
```

## 예제 입력 3

```
6
1 2 3 4 5 6
2 1 1 1
```

## 예제 출력 3

```
54
-24
```

## 힌트

세 번째 예제의 경우에 다음과 같은 식이 최댓값/최솟값이 나온다.

- 최댓값: 1-2÷3+4+5×6
- 최솟값: 1+2+3÷4-5×6

<br>

## 📝 풀어보기

수의 개수 N을 입력받는다. 수열을 리스트 형태로 입력받아 arr에 저장하고 각 연산자마다 개수를 입력받는다.

최대값과 최소값을 저장해둔다.

dfs함수를 생성한다. 위에서 선언한 변수들을 전역변수로 지정하고 i가 N과 같아져서 수열을 수의 개수만큼 다 받았을 경우에는 max_val, min_val에 각각 max_val, ary 중 큰 수를, min_val, ary 중 작은 수를 저장한다.

그외엔 plus, minus, mul, div 가 각각 0보다 크다면 1을 빼고 i+1값과 dfs의 인자 ary에 arr[i]를 각각 더하기, 빼기, 곱하기, 나누기 연산을 한 값을 dfs함수를 실행시킨다. 그리고 각각의 변수에 1을 더한다.

dfs를 실행시키고 최대값과 최소값을 출력한다.

``` python
N = int(input()) # 수의 개수
arr = list(map(int, input().split())) # 수열 입력받기
plus, minus, mul, div = map(int, input().split()) # 연산자 개수 계산
# 최소, 최대값 초기화
max_val = -1e9
min_val = 1e9

def dfs(i, ary):
    global plus, minus, mul, div, max_val, min_val
    if i == N: # 수열을 수의 개수만큼 다 받았을경우 
        max_val = max(max_val, ary)
        min_val = min(min_val, ary)
    else:
        # 덧셈
        if plus > 0:
            plus -= 1
            dfs(i+1, ary + arr[i])
            plus += 1
        if minus > 0:
            minus -= 1
            dfs(i+1, ary - arr[i])
            minus += 1
        if mul > 0:
            mul -= 1
            dfs(i+1, ary * arr[i])
            mul += 1
        if div > 0:
            div -= 1
            dfs(i+1, int(ary / arr[i]))
            div += 1
dfs(1, arr[0])
print(max_val)
print(min_val)
```

