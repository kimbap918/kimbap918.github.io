---
layout: post
title: 파이썬 평범한 배낭(백준 BOJ 12865)
date: 2022-10-03 16:50:00 +0900
image: 백준.png
tags: 알고리즘
categories: 문제풀이
---

<br>

## 문제

이 문제는 아주 평범한 배낭에 관한 문제이다.

한 달 후면 국가의 부름을 받게 되는 준서는 여행을 가려고 한다. 세상과의 단절을 슬퍼하며 최대한 즐기기 위한 여행이기 때문에, 가지고 다닐 배낭 또한 최대한 가치 있게 싸려고 한다.

준서가 여행에 필요하다고 생각하는 N개의 물건이 있다. 각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 준서가 V만큼 즐길 수 있다. 아직 행군을 해본 적이 없는 준서는 최대 K만큼의 무게만을 넣을 수 있는 배낭만 들고 다닐 수 있다. 준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.

<br>

## 입력

첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 준서가 버틸 수 있는 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.

입력으로 주어지는 모든 수는 정수이다.

<br>

## 출력

한 줄에 배낭에 넣을 수 있는 물건들의 가치합의 최댓값을 출력한다.

## 예제 입력 1 

```
4 7
6 13
4 8
3 6
5 12
```

## 예제 출력 1 

```
14
```

<br>

## 📝 풀어보기

물품의 수 N과 버틸 수 있는 무게 K를 입력받는다.

무게(W), 가치(V)를 저장해두기 위한 리스트 WV를 생성한다.

N+1 범위까지, K+1개의 요소를 가진 리스트 dp를 생성한다.

N만큼 반복하면서 WV에 무게와 가치를 입력하고 1부터 N+1, K+1만큼 반복하면서 WV에서 무게와 가치를 하나씩 꺼낸다.

가방의 허용 용량이 무게보다 작으면, dp에 바로 앞전의 요소를 저장한다(물건을 넣지 않는다.)

가방의 허용 용량이 무게보다 크면 물건을 넣지 않은것과 현재 넣을 물건 무게만큼 빼고 현재 물건을 넣는것 중 더 큰 값을 가져온다.

`dp[N][K]`를 출력한다.

``` python
N, K = map(int, input().split())

WV = [[0,0]]
dp = [[0]*(K+1) for _ in range(N+1)]

for i in range(N):
    WV.append(list(map(int, input().split())))

for i in range(1, N+1):
    for j in range(1, K+1):
        w = WV[i][0] # 무게는 WV의 0번째 요소
        v = WV[i][1] # 가치는 WV의 1번째 요소

        if j < w: # 가방의 허용 용량이 무게보다 작다면
            dp[i][j] = dp[i-1][j] # 물건을 넣지 않는다
        else: # 가방의 허용 용량이 무게보다 크다면
            dp[i][j] = max(dp[i-1][j], dp[i-1][j-w]+v) # 이전 베낭을 그대로 가져가거나, 
                                                        # 현재 넣을 물건 무게만큼 빼고, 현재 물건을 넣거나

print(dp[N][K])
```
