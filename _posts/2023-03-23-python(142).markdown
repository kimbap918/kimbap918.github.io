---
layout: post
title: 파이썬 골드바흐 파티션(백준 BOJ 17103)
date: 2023-03-23 20:35:00 +0900
image: 백준.png
tags: 알고리즘 소수판별
categories: 문제풀이

---

<br>

## 문제

- 골드바흐의 추측: 2보다 큰 짝수는 두 소수의 합으로 나타낼 수 있다.

짝수 N을 두 소수의 합으로 나타내는 표현을 골드바흐 파티션이라고 한다. 짝수 N이 주어졌을 때, 골드바흐 파티션의 개수를 구해보자. 두 소수의 순서만 다른 것은 같은 파티션이다.

<br>

## 입력

첫째 줄에 테스트 케이스의 개수 T (1 ≤ T ≤ 100)가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 N은 짝수이고, 2 < N ≤ 1,000,000을 만족한다.

<br>

## 출력

각각의 테스트 케이스마다 골드바흐 파티션의 수를 출력한다.

<br>

## 예제 입력 1 

```
5
6
8
10
12
100
```

## 예제 출력 1 

```
1
1
2
1
6
```

<br>

## 📝 풀어보기

처음엔 N의 범위 1,000,000까지의 소수를 전부 구해서 메모리에 올려놓고 조합이 가능한 골드바흐 파티션을 구하려고 했다.

하지만 이 문제에선 입력하는 값 중 가장 높은 값을 기준으로 소수를 구해내서 골드바흐 파티션을 찾으면 효율적으로 문제를 해결할 수 있었다.

``` python
import sys
import math
input = sys.stdin.readline

# 테스트 케이스 수
T = int(input())
# 정수(짝수)를 테스트 케이스 수만큼 입력
N = [int(input()) for i in range(T)]
# 입력 값 중 가장 큰 값
max_N = max(N)
# 소수 판별을 위한 배열
arr = [True for i in range(max_N+1)]

# 2부터 최대값의 제곱근까지 판별
for i in range(2, int(math.sqrt(max_N))+1):
    # 해당 인덱스가 True면
    if arr[i] == True:
        j = 2
        # i*j가 최대값보다 작거나 같을때까지
        while i * j <= max_N:
            arr[i*j] = False
            j += 1

# 입력한 N값들을 꺼내온다
for i in N:
    cnt = 0
    # 2부터 i의 절반 범위에서 소수찾기
    for j in range(2, i//2+1):
        if arr[j] and arr[i-j]:
            cnt += 1
    print(cnt)
```

